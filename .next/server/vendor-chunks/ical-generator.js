"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ical-generator";
exports.ids = ["vendor-chunks/ical-generator"];
exports.modules = {

/***/ "(rsc)/./node_modules/ical-generator/dist/index.js":
/*!***************************************************!*\
  !*** ./node_modules/ical-generator/dist/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ICalAlarm: () => (/* binding */ I),\n/* harmony export */   ICalAlarmType: () => (/* binding */ L),\n/* harmony export */   ICalAttendee: () => (/* binding */ o),\n/* harmony export */   ICalAttendeeRole: () => (/* binding */ w),\n/* harmony export */   ICalAttendeeStatus: () => (/* binding */ M),\n/* harmony export */   ICalAttendeeType: () => (/* binding */ V),\n/* harmony export */   ICalCalendar: () => (/* binding */ E),\n/* harmony export */   ICalCalendarMethod: () => (/* binding */ F),\n/* harmony export */   ICalCategory: () => (/* binding */ p),\n/* harmony export */   ICalEvent: () => (/* binding */ y),\n/* harmony export */   ICalEventBusyStatus: () => (/* binding */ U),\n/* harmony export */   ICalEventClass: () => (/* binding */ B),\n/* harmony export */   ICalEventRepeatingFreq: () => (/* binding */ N),\n/* harmony export */   ICalEventStatus: () => (/* binding */ z),\n/* harmony export */   ICalEventTransparency: () => (/* binding */ P),\n/* harmony export */   ICalWeekday: () => (/* binding */ S),\n/* harmony export */   \"default\": () => (/* binding */ vt),\n/* harmony export */   escape: () => (/* binding */ l),\n/* harmony export */   foldLines: () => (/* binding */ O),\n/* harmony export */   formatDate: () => (/* binding */ d),\n/* harmony export */   formatDateTZ: () => (/* binding */ b)\n/* harmony export */ });\n/* harmony import */ var uuid_random__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid-random */ \"(rsc)/./node_modules/uuid-random/index.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\nfunction d(n, t, e, a) {\n    if (n != null && n.startsWith(\"/\") && (n = n.substr(1)), typeof t == \"string\" || t instanceof Date) {\n        let i = new Date(t), s = i.getUTCFullYear() + String(i.getUTCMonth() + 1).padStart(2, \"0\") + i.getUTCDate().toString().padStart(2, \"0\");\n        return n && (s = i.getFullYear() + String(i.getMonth() + 1).padStart(2, \"0\") + i.getDate().toString().padStart(2, \"0\")), e ? s : n ? (s += \"T\" + i.getHours().toString().padStart(2, \"0\") + i.getMinutes().toString().padStart(2, \"0\") + i.getSeconds().toString().padStart(2, \"0\"), s) : (s += \"T\" + i.getUTCHours().toString().padStart(2, \"0\") + i.getUTCMinutes().toString().padStart(2, \"0\") + i.getUTCSeconds().toString().padStart(2, \"0\") + (a ? \"\" : \"Z\"), s);\n    } else if (R(t)) {\n        let i = n ? Y(t) && !t.tz() ? t.clone().tz(n) : t : a ? t : t.utc();\n        return i.format(\"YYYYMMDD\") + (e ? \"\" : \"T\" + i.format(\"HHmmss\") + (a || n ? \"\" : \"Z\"));\n    } else if (v(t)) {\n        let i = n ? t.setZone(n) : a ? t : t.setZone(\"utc\");\n        return i.toFormat(\"yyyyLLdd\") + (e ? \"\" : \"T\" + i.toFormat(\"HHmmss\") + (a || n ? \"\" : \"Z\"));\n    } else {\n        let i = t;\n        if (n) i = typeof t.tz == \"function\" ? t.tz(n) : t;\n        else if (!a) if (typeof t.utc == \"function\") i = t.utc();\n        else throw new Error(\"Unable to convert dayjs object to UTC value: UTC plugin is not available!\");\n        return i.format(\"YYYYMMDD\") + (e ? \"\" : \"T\" + i.format(\"HHmmss\") + (a || n ? \"\" : \"Z\"));\n    }\n}\nfunction b(n, t, e, a) {\n    let i = \"\", s = (a == null ? void 0 : a.floating) || !1;\n    return a != null && a.timezone && (i = \";TZID=\" + a.timezone, s = !0), t + i + \":\" + d(n, e, !1, s);\n}\nfunction l(n, t) {\n    return String(n).replace(t ? /[\\\\\"]/g : /[\\\\;,]/g, function(e) {\n        return \"\\\\\" + e;\n    }).replace(/(?:\\r\\n|\\r|\\n)/g, \"\\\\n\");\n}\nfunction O(n) {\n    return n.split(`\\r\n`).map(function(t) {\n        let e = \"\", a = 0;\n        for(let i = 0; i < t.length; i++){\n            let s = t.charAt(i);\n            s >= \"\\uD800\" && s <= \"\\uDBFF\" && (s += t.charAt(++i));\n            let c = new TextEncoder().encode(s).length;\n            a += c, a > 74 && (e += `\\r\n `, a = c), e += s;\n        }\n        return e;\n    }).join(`\\r\n`);\n}\nfunction u(n, t, e) {\n    if (Array.isArray(t)) n.x = t.map((a)=>{\n        if (Array.isArray(a)) return a;\n        if (typeof a.key != \"string\" || typeof a.value != \"string\") throw new Error(\"Either key or value is not a string!\");\n        if (a.key.substr(0, 2) !== \"X-\") throw new Error(\"Key has to start with `X-`!\");\n        return [\n            a.key,\n            a.value\n        ];\n    });\n    else if (typeof t == \"object\") n.x = Object.entries(t).map(([a, i])=>{\n        if (typeof a != \"string\" || typeof i != \"string\") throw new Error(\"Either key or value is not a string!\");\n        if (a.substr(0, 2) !== \"X-\") throw new Error(\"Key has to start with `X-`!\");\n        return [\n            a,\n            i\n        ];\n    });\n    else if (typeof t == \"string\" && typeof e == \"string\") {\n        if (t.substr(0, 2) !== \"X-\") throw new Error(\"Key has to start with `X-`!\");\n        n.x.push([\n            t,\n            e\n        ]);\n    } else return n.x.map((a)=>({\n            key: a[0],\n            value: a[1]\n        }));\n}\nfunction D(n) {\n    let t = n.x.map(([e, a])=>e.toUpperCase() + \":\" + l(a, !1)).join(`\\r\n`);\n    return t.length ? t + `\\r\n` : \"\";\n}\nfunction T(n, t) {\n    let e = null;\n    if (typeof t == \"string\") {\n        let a = t.match(/^(.+) ?<([^>]+)>$/);\n        a ? e = {\n            name: a[1].trim(),\n            email: a[2].trim()\n        } : t.includes(\"@\") && (e = {\n            name: t.trim(),\n            email: t.trim()\n        });\n    } else typeof t == \"object\" && (e = {\n        name: t.name,\n        email: t.email,\n        mailto: t.mailto,\n        sentBy: t.sentBy\n    });\n    if (!e && typeof t == \"string\") throw new Error(\"`\" + n + \"` isn't formated correctly. See https://sebbo2002.github.io/ical-generator/develop/reference/interfaces/ICalOrganizer.html\");\n    if (!e) throw new Error(\"`\" + n + \"` needs to be a valid formed string or an object. See https://sebbo2002.github.io/ical-generator/develop/reference/interfaces/ICalOrganizer.html\");\n    if (!e.name) throw new Error(\"`\" + n + \".name` is empty!\");\n    return e;\n}\nfunction h(n, t) {\n    let e = Object.values(n), a = String(t).toUpperCase();\n    if (!a || !e.includes(a)) throw new Error(`Input must be one of the following: ${e.join(\", \")}`);\n    return a;\n}\nfunction f(n, t) {\n    if (n instanceof Date && isNaN(n.getTime()) || typeof n == \"string\" && isNaN(new Date(n).getTime())) throw new Error(`\\`${t}\\` has to be a valid date!`);\n    if (n instanceof Date || typeof n == \"string\" || v(n) && n.isValid === !0 || (R(n) || j(n)) && n.isValid()) return n;\n    throw new Error(`\\`${t}\\` has to be a valid date!`);\n}\nfunction A(n) {\n    return typeof n == \"string\" || n instanceof Date ? new Date(n) : v(n) ? n.toJSDate() : n.toDate();\n}\nfunction R(n) {\n    return n != null && n._isAMomentObject != null;\n}\nfunction Y(n) {\n    return R(n) && \"tz\" in n && typeof n.tz == \"function\";\n}\nfunction j(n) {\n    return typeof n == \"object\" && n !== null && !(n instanceof Date) && !R(n) && !v(n);\n}\nfunction v(n) {\n    return typeof n == \"object\" && n !== null && \"toJSDate\" in n && typeof n.toJSDate == \"function\";\n}\nfunction k(n) {\n    return n !== null && typeof n == \"object\" && typeof n.asSeconds == \"function\";\n}\nfunction x(n) {\n    return n !== null && typeof n == \"object\" && typeof n.between == \"function\" && typeof n.toString == \"function\";\n}\nfunction m(n) {\n    return n ? typeof n == \"string\" ? n : n.toJSON() : null;\n}\nfunction C(n) {\n    let t = \"\";\n    return n < 0 && (t = \"-\", n *= -1), t += \"P\", n >= 86400 && (t += Math.floor(n / 86400) + \"D\", n %= 86400), !n && t.length > 1 || (t += \"T\", n >= 3600 && (t += Math.floor(n / 3600) + \"H\", n %= 3600), n >= 60 && (t += Math.floor(n / 60) + \"M\", n %= 60), n > 0 ? t += n + \"S\" : t.length <= 2 && (t += \"0S\")), t;\n}\n\nvar w = ((i)=>(i.CHAIR = \"CHAIR\", i.REQ = \"REQ-PARTICIPANT\", i.OPT = \"OPT-PARTICIPANT\", i.NON = \"NON-PARTICIPANT\", i))(w || {}), M = ((s)=>(s.ACCEPTED = \"ACCEPTED\", s.TENTATIVE = \"TENTATIVE\", s.DECLINED = \"DECLINED\", s.DELEGATED = \"DELEGATED\", s.NEEDSACTION = \"NEEDS-ACTION\", s))(M || {}), V = ((s)=>(s.INDIVIDUAL = \"INDIVIDUAL\", s.GROUP = \"GROUP\", s.RESOURCE = \"RESOURCE\", s.ROOM = \"ROOM\", s.UNKNOWN = \"UNKNOWN\", s))(V || {}), o = class {\n    constructor(t, e){\n        if (this.data = {\n            name: null,\n            email: null,\n            mailto: null,\n            sentBy: null,\n            status: null,\n            role: \"REQ-PARTICIPANT\",\n            rsvp: null,\n            type: null,\n            delegatedTo: null,\n            delegatedFrom: null,\n            x: []\n        }, this.event = e, !this.event) throw new Error(\"`event` option required!\");\n        t.name !== void 0 && this.name(t.name), t.email !== void 0 && this.email(t.email), t.mailto !== void 0 && this.mailto(t.mailto), t.sentBy !== void 0 && this.sentBy(t.sentBy), t.status !== void 0 && this.status(t.status), t.role !== void 0 && this.role(t.role), t.rsvp !== void 0 && this.rsvp(t.rsvp), t.type !== void 0 && this.type(t.type), t.delegatedTo !== void 0 && this.delegatedTo(t.delegatedTo), t.delegatedFrom !== void 0 && this.delegatedFrom(t.delegatedFrom), t.delegatesTo && this.delegatesTo(t.delegatesTo), t.delegatesFrom && this.delegatesFrom(t.delegatesFrom), t.x !== void 0 && this.x(t.x);\n    }\n    name(t) {\n        return t === void 0 ? this.data.name : (this.data.name = t || null, this);\n    }\n    email(t) {\n        return t ? (this.data.email = t, this) : this.data.email;\n    }\n    mailto(t) {\n        return t === void 0 ? this.data.mailto : (this.data.mailto = t || null, this);\n    }\n    sentBy(t) {\n        return t ? (this.data.sentBy = t, this) : this.data.sentBy;\n    }\n    role(t) {\n        return t === void 0 ? this.data.role : (this.data.role = h(w, t), this);\n    }\n    rsvp(t) {\n        return t === void 0 ? this.data.rsvp : t === null ? (this.data.rsvp = null, this) : (this.data.rsvp = !!t, this);\n    }\n    status(t) {\n        return t === void 0 ? this.data.status : t ? (this.data.status = h(M, t), this) : (this.data.status = null, this);\n    }\n    type(t) {\n        return t === void 0 ? this.data.type : t ? (this.data.type = h(V, t), this) : (this.data.type = null, this);\n    }\n    delegatedTo(t) {\n        return t === void 0 ? this.data.delegatedTo : t ? (typeof t == \"string\" ? this.data.delegatedTo = new o(T(\"delegatedTo\", t), this.event) : t instanceof o ? this.data.delegatedTo = t : this.data.delegatedTo = new o(t, this.event), this.data.status = \"DELEGATED\", this) : (this.data.delegatedTo = null, this.data.status === \"DELEGATED\" && (this.data.status = null), this);\n    }\n    delegatedFrom(t) {\n        return t === void 0 ? this.data.delegatedFrom : (t ? typeof t == \"string\" ? this.data.delegatedFrom = new o(T(\"delegatedFrom\", t), this.event) : t instanceof o ? this.data.delegatedFrom = t : this.data.delegatedFrom = new o(t, this.event) : this.data.delegatedFrom = null, this);\n    }\n    delegatesTo(t) {\n        let e = t instanceof o ? t : this.event.createAttendee(t);\n        return this.delegatedTo(e), e.delegatedFrom(this), e;\n    }\n    delegatesFrom(t) {\n        let e = t instanceof o ? t : this.event.createAttendee(t);\n        return this.delegatedFrom(e), e.delegatedTo(this), e;\n    }\n    x(t, e) {\n        if (t === void 0) return u(this.data);\n        if (typeof t == \"string\" && typeof e == \"string\") u(this.data, t, e);\n        else if (typeof t == \"object\") u(this.data, t);\n        else throw new Error(\"Either key or value is not a string!\");\n        return this;\n    }\n    toJSON() {\n        var t, e;\n        return Object.assign({}, this.data, {\n            delegatedTo: ((t = this.data.delegatedTo) == null ? void 0 : t.email()) || null,\n            delegatedFrom: ((e = this.data.delegatedFrom) == null ? void 0 : e.email()) || null,\n            x: this.x()\n        });\n    }\n    toString() {\n        let t = \"ATTENDEE\";\n        if (!this.data.email) throw new Error(\"No value for `email` in ICalAttendee given!\");\n        return t += \";ROLE=\" + this.data.role, this.data.type && (t += \";CUTYPE=\" + this.data.type), this.data.status && (t += \";PARTSTAT=\" + this.data.status), this.data.rsvp !== null && (t += \";RSVP=\" + this.data.rsvp.toString().toUpperCase()), this.data.sentBy !== null && (t += ';SENT-BY=\"mailto:' + this.data.sentBy + '\"'), this.data.delegatedTo && (t += ';DELEGATED-TO=\"' + this.data.delegatedTo.email() + '\"'), this.data.delegatedFrom && (t += ';DELEGATED-FROM=\"' + this.data.delegatedFrom.email() + '\"'), this.data.name && (t += ';CN=\"' + l(this.data.name, !0) + '\"'), this.data.email && this.data.mailto && (t += \";EMAIL=\" + l(this.data.email, !1)), this.data.x.length && (t += \";\" + this.data.x.map(([e, a])=>e.toUpperCase() + \"=\" + l(a, !1)).join(\";\")), t += \":MAILTO:\" + l(this.data.mailto || this.data.email, !1) + `\\r\n`, t;\n    }\n};\nvar L = ((e)=>(e.display = \"display\", e.audio = \"audio\", e))(L || {}), J = {\n    end: \"END\",\n    start: \"START\"\n}, I = class {\n    constructor(t, e){\n        if (this.data = {\n            type: null,\n            trigger: null,\n            relatesTo: null,\n            repeat: null,\n            interval: null,\n            attach: null,\n            description: null,\n            x: []\n        }, this.event = e, !e) throw new Error(\"`event` option required!\");\n        t.type !== void 0 && this.type(t.type), t.trigger !== void 0 && this.trigger(t.trigger), t.triggerBefore !== void 0 && this.triggerBefore(t.triggerBefore), t.triggerAfter !== void 0 && this.triggerAfter(t.triggerAfter), t.repeat !== void 0 && this.repeat(t.repeat), t.interval !== void 0 && this.interval(t.interval), t.attach !== void 0 && this.attach(t.attach), t.description !== void 0 && this.description(t.description), t.x !== void 0 && this.x(t.x);\n    }\n    type(t) {\n        if (t === void 0) return this.data.type;\n        if (!t) return this.data.type = null, this;\n        if (!Object.keys(L).includes(t)) throw new Error(\"`type` is not correct, must be either `display` or `audio`!\");\n        return this.data.type = t, this;\n    }\n    trigger(t) {\n        if (t === void 0 && typeof this.data.trigger == \"number\") return -1 * this.data.trigger;\n        if (t === void 0 && this.data.trigger) return this.data.trigger;\n        if (t === void 0) return null;\n        if (!t) this.data.trigger = null;\n        else if (typeof t == \"number\" && isFinite(t)) this.data.trigger = -1 * t;\n        else {\n            if (typeof t == \"number\") throw new Error(\"`trigger` is not correct, must be a finite number or a supported date!\");\n            this.data.trigger = f(t, \"trigger\");\n        }\n        return this;\n    }\n    relatesTo(t) {\n        if (t === void 0) return this.data.relatesTo;\n        if (!t) return this.data.relatesTo = null, this;\n        if (!Object.values(J).includes(t)) throw new Error(\"`relatesTo` is not correct, must be either `START` or `END`!\");\n        return this.data.relatesTo = t, this;\n    }\n    triggerAfter(t) {\n        return t === void 0 ? this.data.trigger : this.trigger(typeof t == \"number\" ? -1 * t : t);\n    }\n    triggerBefore(t) {\n        return t === void 0 ? this.trigger() : this.trigger(t);\n    }\n    repeat(t) {\n        if (t === void 0) return this.data.repeat;\n        if (!t) return this.data.repeat = null, this;\n        if (typeof t != \"number\" || !isFinite(t)) throw new Error(\"`repeat` is not correct, must be numeric!\");\n        return this.data.repeat = t, this;\n    }\n    interval(t) {\n        if (t === void 0) return this.data.interval || null;\n        if (!t) return this.data.interval = null, this;\n        if (typeof t != \"number\" || !isFinite(t)) throw new Error(\"`interval` is not correct, must be numeric!\");\n        return this.data.interval = t, this;\n    }\n    attach(t) {\n        if (t === void 0) return this.data.attach;\n        if (!t) return this.data.attach = null, this;\n        let e = null;\n        if (typeof t == \"string\") e = {\n            uri: t,\n            mime: null\n        };\n        else if (typeof t == \"object\") e = {\n            uri: t.uri,\n            mime: t.mime || null\n        };\n        else throw new Error(\"`attachment` needs to be a valid formed string or an object. See https://sebbo2002.github.io/ical-generator/develop/reference/classes/ICalAlarm.html#attach\");\n        if (!e.uri) throw new Error(\"`attach.uri` is empty!\");\n        return this.data.attach = {\n            uri: e.uri,\n            mime: e.mime\n        }, this;\n    }\n    description(t) {\n        return t === void 0 ? this.data.description : t ? (this.data.description = t, this) : (this.data.description = null, this);\n    }\n    x(t, e) {\n        if (t === void 0) return u(this.data);\n        if (typeof t == \"string\" && typeof e == \"string\") u(this.data, t, e);\n        else if (typeof t == \"object\") u(this.data, t);\n        else throw new Error(\"Either key or value is not a string!\");\n        return this;\n    }\n    toJSON() {\n        let t = this.trigger();\n        return Object.assign({}, this.data, {\n            trigger: typeof t == \"number\" ? t : m(t),\n            x: this.x()\n        });\n    }\n    toString() {\n        let t = `BEGIN:VALARM\\r\n`;\n        if (!this.data.type) throw new Error(\"No value for `type` in ICalAlarm given!\");\n        if (!this.data.trigger) throw new Error(\"No value for `trigger` in ICalAlarm given!\");\n        if (t += \"ACTION:\" + this.data.type.toUpperCase() + `\\r\n`, typeof this.data.trigger == \"number\" && this.data.relatesTo === null ? this.data.trigger > 0 ? t += \"TRIGGER;RELATED=END:\" + C(this.data.trigger) + `\\r\n` : t += \"TRIGGER:\" + C(this.data.trigger) + `\\r\n` : typeof this.data.trigger == \"number\" ? t += \"TRIGGER;RELATED=\" + this.data.relatesTo.toUpperCase() + \":\" + C(this.data.trigger) + `\\r\n` : t += \"TRIGGER;VALUE=DATE-TIME:\" + d(this.event.timezone(), this.data.trigger) + `\\r\n`, this.data.repeat && !this.data.interval) throw new Error(\"No value for `interval` in ICalAlarm given, but required for `repeat`!\");\n        if (this.data.repeat && (t += \"REPEAT:\" + this.data.repeat + `\\r\n`), this.data.interval && !this.data.repeat) throw new Error(\"No value for `repeat` in ICalAlarm given, but required for `interval`!\");\n        return this.data.interval && (t += \"DURATION:\" + C(this.data.interval) + `\\r\n`), this.data.type === \"audio\" && this.data.attach && this.data.attach.mime ? t += \"ATTACH;FMTTYPE=\" + l(this.data.attach.mime, !1) + \":\" + l(this.data.attach.uri, !1) + `\\r\n` : this.data.type === \"audio\" && this.data.attach ? t += \"ATTACH;VALUE=URI:\" + l(this.data.attach.uri, !1) + `\\r\n` : this.data.type === \"audio\" && (t += `ATTACH;VALUE=URI:Basso\\r\n`), this.data.type === \"display\" && this.data.description ? t += \"DESCRIPTION:\" + l(this.data.description, !1) + `\\r\n` : this.data.type === \"display\" && (t += \"DESCRIPTION:\" + l(this.event.summary(), !1) + `\\r\n`), t += D(this.data), t += `END:VALARM\\r\n`, t;\n    }\n};\nvar p = class {\n    constructor(t){\n        this.data = {\n            name: null\n        }, t.name !== void 0 && this.name(t.name);\n    }\n    name(t) {\n        return t === void 0 ? this.data.name : (this.data.name = t || null, this);\n    }\n    toJSON() {\n        return Object.assign({}, this.data);\n    }\n    toString() {\n        if (!this.data.name) throw new Error(\"No value for `name` in ICalCategory given!\");\n        return l(this.data.name, !1);\n    }\n};\nvar N = ((r)=>(r.SECONDLY = \"SECONDLY\", r.MINUTELY = \"MINUTELY\", r.HOURLY = \"HOURLY\", r.DAILY = \"DAILY\", r.WEEKLY = \"WEEKLY\", r.MONTHLY = \"MONTHLY\", r.YEARLY = \"YEARLY\", r))(N || {}), S = ((r)=>(r.SU = \"SU\", r.MO = \"MO\", r.TU = \"TU\", r.WE = \"WE\", r.TH = \"TH\", r.FR = \"FR\", r.SA = \"SA\", r))(S || {});\nvar z = ((a)=>(a.CONFIRMED = \"CONFIRMED\", a.TENTATIVE = \"TENTATIVE\", a.CANCELLED = \"CANCELLED\", a))(z || {}), U = ((i)=>(i.FREE = \"FREE\", i.TENTATIVE = \"TENTATIVE\", i.BUSY = \"BUSY\", i.OOF = \"OOF\", i))(U || {}), P = ((e)=>(e.TRANSPARENT = \"TRANSPARENT\", e.OPAQUE = \"OPAQUE\", e))(P || {}), B = ((a)=>(a.PUBLIC = \"PUBLIC\", a.PRIVATE = \"PRIVATE\", a.CONFIDENTIAL = \"CONFIDENTIAL\", a))(B || {}), y = class {\n    constructor(t, e){\n        if (this.data = {\n            id: uuid_random__WEBPACK_IMPORTED_MODULE_0__(),\n            sequence: 0,\n            start: null,\n            end: null,\n            recurrenceId: null,\n            timezone: null,\n            stamp: new Date,\n            allDay: !1,\n            floating: !1,\n            repeating: null,\n            summary: \"\",\n            location: null,\n            description: null,\n            organizer: null,\n            attendees: [],\n            alarms: [],\n            categories: [],\n            status: null,\n            busystatus: null,\n            priority: null,\n            url: null,\n            attachments: [],\n            transparency: null,\n            created: null,\n            lastModified: null,\n            class: null,\n            x: []\n        }, this.calendar = e, !e) throw new Error(\"`calendar` option required!\");\n        t.id && this.id(t.id), t.sequence !== void 0 && this.sequence(t.sequence), t.start && this.start(t.start), t.end !== void 0 && this.end(t.end), t.recurrenceId !== void 0 && this.recurrenceId(t.recurrenceId), t.timezone !== void 0 && this.timezone(t.timezone), t.stamp !== void 0 && this.stamp(t.stamp), t.allDay !== void 0 && this.allDay(t.allDay), t.floating !== void 0 && this.floating(t.floating), t.repeating !== void 0 && this.repeating(t.repeating), t.summary !== void 0 && this.summary(t.summary), t.location !== void 0 && this.location(t.location), t.description !== void 0 && this.description(t.description), t.organizer !== void 0 && this.organizer(t.organizer), t.attendees !== void 0 && this.attendees(t.attendees), t.alarms !== void 0 && this.alarms(t.alarms), t.categories !== void 0 && this.categories(t.categories), t.status !== void 0 && this.status(t.status), t.busystatus !== void 0 && this.busystatus(t.busystatus), t.priority !== void 0 && this.priority(t.priority), t.url !== void 0 && this.url(t.url), t.attachments !== void 0 && this.attachments(t.attachments), t.transparency !== void 0 && this.transparency(t.transparency), t.created !== void 0 && this.created(t.created), t.lastModified !== void 0 && this.lastModified(t.lastModified), t.class !== void 0 && this.class(t.class), t.x !== void 0 && this.x(t.x);\n    }\n    id(t) {\n        return t === void 0 ? this.data.id : (this.data.id = String(t), this);\n    }\n    uid(t) {\n        return t === void 0 ? this.id() : this.id(t);\n    }\n    sequence(t) {\n        if (t === void 0) return this.data.sequence;\n        let e = parseInt(String(t), 10);\n        if (isNaN(e)) throw new Error(\"`sequence` must be a number!\");\n        return this.data.sequence = t, this;\n    }\n    start(t) {\n        if (t === void 0) return this.data.start;\n        if (this.data.start = f(t, \"start\"), this.data.start && this.data.end && A(this.data.start).getTime() > A(this.data.end).getTime()) {\n            let e = this.data.start;\n            this.data.start = this.data.end, this.data.end = e;\n        }\n        return this;\n    }\n    end(t) {\n        if (t === void 0) return this.data.end;\n        if (t === null) return this.data.end = null, this;\n        if (this.data.end = f(t, \"end\"), this.data.start && this.data.end && A(this.data.start).getTime() > A(this.data.end).getTime()) {\n            let e = this.data.start;\n            this.data.start = this.data.end, this.data.end = e;\n        }\n        return this;\n    }\n    recurrenceId(t) {\n        return t === void 0 ? this.data.recurrenceId : t === null ? (this.data.recurrenceId = null, this) : (this.data.recurrenceId = f(t, \"recurrenceId\"), this);\n    }\n    timezone(t) {\n        return t === void 0 && this.data.timezone !== null ? this.data.timezone : t === void 0 ? this.calendar.timezone() : (this.data.timezone = t && t !== \"UTC\" ? t.toString() : null, this.data.timezone && (this.data.floating = !1), this);\n    }\n    stamp(t) {\n        return t === void 0 ? this.data.stamp : (this.data.stamp = f(t, \"stamp\"), this);\n    }\n    timestamp(t) {\n        return t === void 0 ? this.stamp() : this.stamp(t);\n    }\n    allDay(t) {\n        return t === void 0 ? this.data.allDay : (this.data.allDay = !!t, this);\n    }\n    floating(t) {\n        return t === void 0 ? this.data.floating : (this.data.floating = !!t, this.data.floating && (this.data.timezone = null), this);\n    }\n    repeating(t) {\n        if (t === void 0) return this.data.repeating;\n        if (!t) return this.data.repeating = null, this;\n        if (x(t) || typeof t == \"string\") return this.data.repeating = t, this;\n        if (this.data.repeating = {\n            freq: h(N, t.freq)\n        }, t.count) {\n            if (!isFinite(t.count)) throw new Error(\"`repeating.count` must be a finite number!\");\n            this.data.repeating.count = t.count;\n        }\n        if (t.interval) {\n            if (!isFinite(t.interval)) throw new Error(\"`repeating.interval` must be a finite number!\");\n            this.data.repeating.interval = t.interval;\n        }\n        if (t.until !== void 0 && (this.data.repeating.until = f(t.until, \"repeating.until\")), t.byDay) {\n            let e = Array.isArray(t.byDay) ? t.byDay : [\n                t.byDay\n            ];\n            this.data.repeating.byDay = e.map((a)=>h(S, a));\n        }\n        if (t.byMonth) {\n            let e = Array.isArray(t.byMonth) ? t.byMonth : [\n                t.byMonth\n            ];\n            this.data.repeating.byMonth = e.map((a)=>{\n                if (typeof a != \"number\" || a < 1 || a > 12) throw new Error(\"`repeating.byMonth` contains invalid value `\" + a + \"`!\");\n                return a;\n            });\n        }\n        if (t.byMonthDay) {\n            let e = Array.isArray(t.byMonthDay) ? t.byMonthDay : [\n                t.byMonthDay\n            ];\n            this.data.repeating.byMonthDay = e.map((a)=>{\n                if (typeof a != \"number\" || a < -31 || a > 31 || a === 0) throw new Error(\"`repeating.byMonthDay` contains invalid value `\" + a + \"`!\");\n                return a;\n            });\n        }\n        if (t.bySetPos) {\n            if (!this.data.repeating.byDay) throw \"`repeating.bySetPos` must be used along with `repeating.byDay`!\";\n            let e = Array.isArray(t.bySetPos) ? t.bySetPos : [\n                t.bySetPos\n            ];\n            this.data.repeating.bySetPos = e.map((a)=>{\n                if (typeof a != \"number\" || a < -366 || a > 366 || a === 0) throw \"`repeating.bySetPos` contains invalid value `\" + a + \"`!\";\n                return a;\n            });\n        }\n        if (t.exclude) {\n            let e = Array.isArray(t.exclude) ? t.exclude : [\n                t.exclude\n            ];\n            this.data.repeating.exclude = e.map((a, i)=>f(a, `repeating.exclude[${i}]`));\n        }\n        return t.startOfWeek && (this.data.repeating.startOfWeek = h(S, t.startOfWeek)), this;\n    }\n    summary(t) {\n        return t === void 0 ? this.data.summary : (this.data.summary = t ? String(t) : \"\", this);\n    }\n    location(t) {\n        if (t === void 0) return this.data.location;\n        if (typeof t == \"string\") return this.data.location = {\n            title: t\n        }, this;\n        if (t && !t.title || t != null && t.geo && (!isFinite(t.geo.lat) || !isFinite(t.geo.lon))) throw new Error(\"`location` isn't formatted correctly. See https://sebbo2002.github.io/ical-generator/develop/reference/classes/ICalEvent.html#location\");\n        return this.data.location = t || null, this;\n    }\n    description(t) {\n        return t === void 0 ? this.data.description : t === null ? (this.data.description = null, this) : (typeof t == \"string\" ? this.data.description = {\n            plain: t\n        } : this.data.description = t, this);\n    }\n    organizer(t) {\n        return t === void 0 ? this.data.organizer : t === null ? (this.data.organizer = null, this) : (this.data.organizer = T(\"organizer\", t), this);\n    }\n    createAttendee(t = {}) {\n        if (t instanceof o) return this.data.attendees.push(t), t;\n        typeof t == \"string\" && (t = T(\"data\", t));\n        let e = new o(t, this);\n        return this.data.attendees.push(e), e;\n    }\n    attendees(t) {\n        return t ? (t.forEach((e)=>this.createAttendee(e)), this) : this.data.attendees;\n    }\n    createAlarm(t = {}) {\n        let e = t instanceof I ? t : new I(t, this);\n        return this.data.alarms.push(e), e;\n    }\n    alarms(t) {\n        return t ? (t.forEach((e)=>this.createAlarm(e)), this) : this.data.alarms;\n    }\n    createCategory(t = {}) {\n        let e = t instanceof p ? t : new p(t);\n        return this.data.categories.push(e), e;\n    }\n    categories(t) {\n        return t ? (t.forEach((e)=>this.createCategory(e)), this) : this.data.categories;\n    }\n    status(t) {\n        return t === void 0 ? this.data.status : t === null ? (this.data.status = null, this) : (this.data.status = h(z, t), this);\n    }\n    busystatus(t) {\n        return t === void 0 ? this.data.busystatus : t === null ? (this.data.busystatus = null, this) : (this.data.busystatus = h(U, t), this);\n    }\n    priority(t) {\n        if (t === void 0) return this.data.priority;\n        if (t === null) return this.data.priority = null, this;\n        if (t < 0 || t > 9) throw new Error(\"`priority` is invalid, musst be 0 ≤ priority ≤ 9.\");\n        return this.data.priority = Math.round(t), this;\n    }\n    url(t) {\n        return t === void 0 ? this.data.url : (this.data.url = t ? String(t) : null, this);\n    }\n    createAttachment(t) {\n        return this.data.attachments.push(t), this;\n    }\n    attachments(t) {\n        return t ? (t.forEach((e)=>this.createAttachment(e)), this) : this.data.attachments;\n    }\n    transparency(t) {\n        return t === void 0 ? this.data.transparency : t ? (this.data.transparency = h(P, t), this) : (this.data.transparency = null, this);\n    }\n    created(t) {\n        return t === void 0 ? this.data.created : t === null ? (this.data.created = null, this) : (this.data.created = f(t, \"created\"), this);\n    }\n    lastModified(t) {\n        return t === void 0 ? this.data.lastModified : t === null ? (this.data.lastModified = null, this) : (this.data.lastModified = f(t, \"lastModified\"), this);\n    }\n    class(t) {\n        return t === void 0 ? this.data.class : t === null ? (this.data.class = null, this) : (this.data.class = h(B, t), this);\n    }\n    x(t, e) {\n        return t === void 0 ? u(this.data) : (typeof t == \"string\" && typeof e == \"string\" && u(this.data, t, e), typeof t == \"object\" && u(this.data, t), this);\n    }\n    toJSON() {\n        var e;\n        let t = null;\n        return x(this.data.repeating) || typeof this.data.repeating == \"string\" ? t = this.data.repeating.toString() : this.data.repeating && (t = Object.assign({}, this.data.repeating, {\n            until: m(this.data.repeating.until) || void 0,\n            exclude: (e = this.data.repeating.exclude) == null ? void 0 : e.map((a)=>m(a))\n        })), Object.assign({}, this.data, {\n            start: m(this.data.start) || null,\n            end: m(this.data.end) || null,\n            recurrenceId: m(this.data.recurrenceId) || null,\n            stamp: m(this.data.stamp) || null,\n            created: m(this.data.created) || null,\n            lastModified: m(this.data.lastModified) || null,\n            repeating: t,\n            x: this.x()\n        });\n    }\n    toString() {\n        var e, a, i, s, c;\n        let t = \"\";\n        if (!this.data.start) throw new Error(\"No value for `start` in ICalEvent #\" + this.data.id + \" given!\");\n        if (t += `BEGIN:VEVENT\\r\n`, t += \"UID:\" + this.data.id + `\\r\n`, t += \"SEQUENCE:\" + this.data.sequence + `\\r\n`, t += \"DTSTAMP:\" + d(this.calendar.timezone(), this.data.stamp) + `\\r\n`, this.data.allDay ? (t += \"DTSTART;VALUE=DATE:\" + d(this.calendar.timezone(), this.data.start, !0) + `\\r\n`, this.data.end && (t += \"DTEND;VALUE=DATE:\" + d(this.calendar.timezone(), this.data.end, !0) + `\\r\n`), t += `X-MICROSOFT-CDO-ALLDAYEVENT:TRUE\\r\n`, t += `X-MICROSOFT-MSNCALENDAR-ALLDAYEVENT:TRUE\\r\n`) : (t += b(this.timezone(), \"DTSTART\", this.data.start, this.data) + `\\r\n`, this.data.end && (t += b(this.timezone(), \"DTEND\", this.data.end, this.data) + `\\r\n`)), x(this.data.repeating) || typeof this.data.repeating == \"string\") {\n            let r = this.data.repeating.toString().replace(/\\r\\n/g, `\n`).split(`\n`).filter((g)=>g && !g.startsWith(\"DTSTART:\")).join(`\\r\n`);\n            !r.includes(`\\r\n`) && !r.startsWith(\"RRULE:\") && (r = \"RRULE:\" + r), t += r.trim() + `\\r\n`;\n        } else this.data.repeating && (t += \"RRULE:FREQ=\" + this.data.repeating.freq, this.data.repeating.count && (t += \";COUNT=\" + this.data.repeating.count), this.data.repeating.interval && (t += \";INTERVAL=\" + this.data.repeating.interval), this.data.repeating.until && (t += \";UNTIL=\" + d(this.calendar.timezone(), this.data.repeating.until, !1, this.floating())), this.data.repeating.byDay && (t += \";BYDAY=\" + this.data.repeating.byDay.join(\",\")), this.data.repeating.byMonth && (t += \";BYMONTH=\" + this.data.repeating.byMonth.join(\",\")), this.data.repeating.byMonthDay && (t += \";BYMONTHDAY=\" + this.data.repeating.byMonthDay.join(\",\")), this.data.repeating.bySetPos && (t += \";BYSETPOS=\" + this.data.repeating.bySetPos.join(\",\")), this.data.repeating.startOfWeek && (t += \";WKST=\" + this.data.repeating.startOfWeek), t += `\\r\n`, this.data.repeating.exclude && (this.data.allDay ? t += \"EXDATE;VALUE=DATE:\" + this.data.repeating.exclude.map((r)=>d(this.calendar.timezone(), r, !0)).join(\",\") + `\\r\n` : (t += \"EXDATE\", this.timezone() ? t += \";TZID=\" + this.timezone() + \":\" + this.data.repeating.exclude.map((r)=>d(this.timezone(), r, !1, !0)).join(\",\") + `\\r\n` : t += \":\" + this.data.repeating.exclude.map((r)=>d(this.timezone(), r, !1, this.floating())).join(\",\") + `\\r\n`)));\n        return this.data.recurrenceId && (t += b(this.timezone(), \"RECURRENCE-ID\", this.data.recurrenceId, this.data) + `\\r\n`), t += \"SUMMARY:\" + l(this.data.summary, !1) + `\\r\n`, this.data.transparency && (t += \"TRANSP:\" + l(this.data.transparency, !1) + `\\r\n`), (e = this.data.location) != null && e.title && (t += \"LOCATION:\" + l(this.data.location.title + (this.data.location.address ? `\n` + this.data.location.address : \"\"), !1) + `\\r\n`, this.data.location.radius && this.data.location.geo && (t += \"X-APPLE-STRUCTURED-LOCATION;VALUE=URI;\" + (this.data.location.address ? \"X-ADDRESS=\" + l(this.data.location.address, !1) + \";\" : \"\") + \"X-APPLE-RADIUS=\" + l(this.data.location.radius, !1) + \";X-TITLE=\" + l(this.data.location.title, !1) + \":geo:\" + l((a = this.data.location.geo) == null ? void 0 : a.lat, !1) + \",\" + l((i = this.data.location.geo) == null ? void 0 : i.lon, !1) + `\\r\n`), this.data.location.geo && (t += \"GEO:\" + l((s = this.data.location.geo) == null ? void 0 : s.lat, !1) + \";\" + l((c = this.data.location.geo) == null ? void 0 : c.lon, !1) + `\\r\n`)), this.data.description && (t += \"DESCRIPTION:\" + l(this.data.description.plain, !1) + `\\r\n`, this.data.description.html && (t += \"X-ALT-DESC;FMTTYPE=text/html:\" + l(this.data.description.html, !1) + `\\r\n`)), this.data.organizer && (t += 'ORGANIZER;CN=\"' + l(this.data.organizer.name, !0) + '\"', this.data.organizer.sentBy && (t += ';SENT-BY=\"mailto:' + l(this.data.organizer.sentBy, !0) + '\"'), this.data.organizer.email && this.data.organizer.mailto && (t += \";EMAIL=\" + l(this.data.organizer.email, !1)), this.data.organizer.email && (t += \":mailto:\" + l(this.data.organizer.mailto || this.data.organizer.email, !1)), t += `\\r\n`), this.data.attendees.forEach(function(r) {\n            t += r.toString();\n        }), this.data.alarms.forEach(function(r) {\n            t += r.toString();\n        }), this.data.categories.length > 0 && (t += \"CATEGORIES:\" + this.data.categories.map(function(r) {\n            return r.toString();\n        }).join() + `\\r\n`), this.data.url && (t += \"URL;VALUE=URI:\" + l(this.data.url, !1) + `\\r\n`), this.data.attachments.length > 0 && this.data.attachments.forEach((r)=>{\n            t += \"ATTACH:\" + l(r, !1) + `\\r\n`;\n        }), this.data.status && (t += \"STATUS:\" + this.data.status.toUpperCase() + `\\r\n`), this.data.busystatus && (t += \"X-MICROSOFT-CDO-BUSYSTATUS:\" + this.data.busystatus.toUpperCase() + `\\r\n`), this.data.priority !== null && (t += \"PRIORITY:\" + this.data.priority + `\\r\n`), t += D(this.data), this.data.created && (t += \"CREATED:\" + d(this.calendar.timezone(), this.data.created) + `\\r\n`), this.data.lastModified && (t += \"LAST-MODIFIED:\" + d(this.calendar.timezone(), this.data.lastModified) + `\\r\n`), this.data.class && (t += \"CLASS:\" + this.data.class.toUpperCase() + `\\r\n`), t += `END:VEVENT\\r\n`, t;\n    }\n};\n\nvar F = ((g)=>(g.PUBLISH = \"PUBLISH\", g.REQUEST = \"REQUEST\", g.REPLY = \"REPLY\", g.ADD = \"ADD\", g.CANCEL = \"CANCEL\", g.REFRESH = \"REFRESH\", g.COUNTER = \"COUNTER\", g.DECLINECOUNTER = \"DECLINECOUNTER\", g))(F || {}), E = class {\n    constructor(t = {}){\n        this.data = {\n            prodId: \"//sebbo.net//ical-generator//EN\",\n            method: null,\n            name: null,\n            description: null,\n            timezone: null,\n            source: null,\n            url: null,\n            scale: null,\n            ttl: null,\n            events: [],\n            x: []\n        }, t.prodId !== void 0 && this.prodId(t.prodId), t.method !== void 0 && this.method(t.method), t.name !== void 0 && this.name(t.name), t.description !== void 0 && this.description(t.description), t.timezone !== void 0 && this.timezone(t.timezone), t.source !== void 0 && this.source(t.source), t.url !== void 0 && this.url(t.url), t.scale !== void 0 && this.scale(t.scale), t.ttl !== void 0 && this.ttl(t.ttl), t.events !== void 0 && this.events(t.events), t.x !== void 0 && this.x(t.x);\n    }\n    prodId(t) {\n        if (!t) return this.data.prodId;\n        if (typeof t == \"string\" && /^\\/\\/(.+)\\/\\/(.+)\\/\\/([A-Z]{1,4})$/.test(t)) return this.data.prodId = t, this;\n        if (typeof t == \"string\") throw new Error(\"`prodId` isn't formated correctly. See https://sebbo2002.github.io/ical-generator/develop/reference/classes/ICalCalendar.html#prodId\");\n        if (typeof t != \"object\") throw new Error(\"`prodid` needs to be a valid formed string or an object!\");\n        if (!t.company) throw new Error(\"`prodid.company` is a mandatory item!\");\n        if (!t.product) throw new Error(\"`prodid.product` is a mandatory item!\");\n        let a = (t.language || \"EN\").toUpperCase();\n        return this.data.prodId = \"//\" + t.company + \"//\" + t.product + \"//\" + a, this;\n    }\n    method(t) {\n        return t === void 0 ? this.data.method : t ? (this.data.method = h(F, t), this) : (this.data.method = null, this);\n    }\n    name(t) {\n        return t === void 0 ? this.data.name : (this.data.name = t ? String(t) : null, this);\n    }\n    description(t) {\n        return t === void 0 ? this.data.description : (this.data.description = t ? String(t) : null, this);\n    }\n    timezone(t) {\n        var e;\n        return t === void 0 ? ((e = this.data.timezone) == null ? void 0 : e.name) || null : (t === \"UTC\" ? this.data.timezone = null : typeof t == \"string\" ? this.data.timezone = {\n            name: t\n        } : t === null ? this.data.timezone = null : this.data.timezone = t, this);\n    }\n    source(t) {\n        return t === void 0 ? this.data.source : (this.data.source = t || null, this);\n    }\n    url(t) {\n        return t === void 0 ? this.data.url : (this.data.url = t || null, this);\n    }\n    scale(t) {\n        return t === void 0 ? this.data.scale : (t === null ? this.data.scale = null : this.data.scale = t.toUpperCase(), this);\n    }\n    ttl(t) {\n        return t === void 0 ? this.data.ttl : (k(t) ? this.data.ttl = t.asSeconds() : t && t > 0 ? this.data.ttl = t : this.data.ttl = null, this);\n    }\n    createEvent(t) {\n        let e = t instanceof y ? t : new y(t, this);\n        return this.data.events.push(e), e;\n    }\n    events(t) {\n        return t ? (t.forEach((e)=>this.createEvent(e)), this) : this.data.events;\n    }\n    clear() {\n        return this.data.events = [], this;\n    }\n    save(t, e) {\n        return e ? ((0,fs__WEBPACK_IMPORTED_MODULE_1__.writeFile)(t, this.toString(), e), this) : fs__WEBPACK_IMPORTED_MODULE_1__.promises.writeFile(t, this.toString());\n    }\n    saveSync(t) {\n        return (0,fs__WEBPACK_IMPORTED_MODULE_1__.writeFileSync)(t, this.toString()), this;\n    }\n    serve(t, e = \"calendar.ics\") {\n        return t.writeHead(200, {\n            \"Content-Type\": \"text/calendar; charset=utf-8\",\n            \"Content-Disposition\": `attachment; filename=\"${e}\"`\n        }), t.end(this.toString()), this;\n    }\n    toBlob() {\n        return new Blob([\n            this.toString()\n        ], {\n            type: \"text/calendar\"\n        });\n    }\n    toURL() {\n        return URL.createObjectURL(this.toBlob());\n    }\n    x(t, e) {\n        if (t === void 0) return u(this.data);\n        if (typeof t == \"string\" && typeof e == \"string\") u(this.data, t, e);\n        else if (typeof t == \"object\") u(this.data, t);\n        else throw new Error(\"Either key or value is not a string!\");\n        return this;\n    }\n    toJSON() {\n        return Object.assign({}, this.data, {\n            timezone: this.timezone(),\n            events: this.data.events.map((t)=>t.toJSON()),\n            x: this.x()\n        });\n    }\n    length() {\n        return this.data.events.length;\n    }\n    toString() {\n        var e, a;\n        let t = \"\";\n        return t = `BEGIN:VCALENDAR\\r\nVERSION:2.0\\r\n`, t += \"PRODID:-\" + this.data.prodId + `\\r\n`, this.data.url && (t += \"URL:\" + this.data.url + `\\r\n`), this.data.source && (t += \"SOURCE;VALUE=URI:\" + this.data.source + `\\r\n`), this.data.scale && (t += \"CALSCALE:\" + this.data.scale + `\\r\n`), this.data.method && (t += \"METHOD:\" + this.data.method + `\\r\n`), this.data.name && (t += \"NAME:\" + this.data.name + `\\r\n`, t += \"X-WR-CALNAME:\" + this.data.name + `\\r\n`), this.data.description && (t += \"X-WR-CALDESC:\" + this.data.description + `\\r\n`), (e = this.data.timezone) != null && e.generator && [\n            ...new Set([\n                this.timezone(),\n                ...this.data.events.map((s)=>s.timezone())\n            ])\n        ].filter((s)=>s !== null && !s.startsWith(\"/\")).forEach((s)=>{\n            var r;\n            if (!((r = this.data.timezone) != null && r.generator)) return;\n            let c = this.data.timezone.generator(s);\n            c && (t += c.replace(/\\r\\n/g, `\n`).replace(/\\n/g, `\\r\n`).trim() + `\\r\n`);\n        }), (a = this.data.timezone) != null && a.name && (t += \"TIMEZONE-ID:\" + this.data.timezone.name + `\\r\n`, t += \"X-WR-TIMEZONE:\" + this.data.timezone.name + `\\r\n`), this.data.ttl && (t += \"REFRESH-INTERVAL;VALUE=DURATION:\" + C(this.data.ttl) + `\\r\n`, t += \"X-PUBLISHED-TTL:\" + C(this.data.ttl) + `\\r\n`), this.data.events.forEach((i)=>t += i.toString()), t += D(this.data), t += \"END:VCALENDAR\", O(t);\n    }\n};\nfunction X(n) {\n    return new E(n);\n}\nvar vt = X;\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ical-generator/dist/index.js\n");

/***/ })

};
;